val df = spark.read.format("csv").option("header","true").option("inferSchema","true").option("quoteAll","true").load("winemag/winemag-data-130k-v2.csv")

scala> df.printSchema
root
 |-- _c0: string (nullable = true)
 |-- country: string (nullable = true)
 |-- description: string (nullable = true)
 |-- designation: string (nullable = true)
 |-- points: string (nullable = true)
 |-- price: string (nullable = true)
 |-- province: string (nullable = true)
 |-- region_1: string (nullable = true)
 |-- region_2: string (nullable = true)
 |-- taster_name: string (nullable = true)
 |-- taster_twitter_handle: string (nullable = true)
 |-- title: string (nullable = true)
 |-- variety: string (nullable = true)
 |-- winery: string (nullable = true)

 
scala> df.select("variety").groupBy("variety").count.show
+--------------------+-----+
|             variety|count|
+--------------------+-----+
|               Duras|    7|
|Sauvignon Blanc-S...|   68|
|           Clairette|    3|
|         Mavrodaphne|    5|
|         Casavecchia|    5|
|              Shiraz|  836|
|            Cesanese|    2|
|      Muscat Canelli|   36|
|Lambrusco Graspar...|   18|
|              Cayuga|    2|
|        Pansa Blanca|   14|
|       Madeira Blend|    3|
|Chardonnay-Pinot ...|    5|
|           Frankovka|    1|
|          Prié Blanc|    6|
|      Tinto del Pais|   18|
|            Castelão|   34|
|Cabernet Sauvigno...|   27|
|      Cabernet-Syrah|   13|
|Sauvignon Blanc-C...|    4|
+--------------------+-----+
only showing top 20 rows

val df1 = df.where("not (variety is null or description is null)").select("description","variety")

val rdd = df1.rdd.map{ case org.apache.spark.sql.Row(description,variety) => Array(description.toString,variety.toString) }


-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(100).mkString(",")
nonWordSplit.distinct.count   // 31107

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.sample(false, 0.3, 42).take(100).mkString("\n")
filterNumbers.distinct.count   // 30457

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
val stopwords = Set(
 "the","a","an","of","or","in","for","by","on","but", "is", "not", "with", "as", "was", "if",
 "they", "are", "this", "and", "it", "have", "from", "at", "my", "be", "that", "to", "so", "what"
)
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- lists tokens greather one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list least occurring terms in the corpus
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count
res24: Long = 20183

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""")
 .map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filterNot(token => stopwords.contains(token))
 .filterNot(token => rareTokens.contains(token))
 .filter(token => token.size >= 2)
 .toSeq
}

rdd.flatMap(x => tokenize(x(0))).distinct.count
res27: Long = 20183

val sets = rdd.randomSplit(Array(0.8,0.2))
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))
tokens.first.take(20)

val categories = rdd.map( x => x(1)).distinct.sortBy(x => x).zipWithIndex.collect.toMap

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 15).toInt
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val tf = hashingTF.transform(tokens)
tf.cache

val v = tf.first.asInstanceOf[SV]
v.size
v.values.size
println(v.values.take(10).toSeq)
println(v.indices.take(10).toSeq)

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input. We will then transform our term frequency vectors to TF-IDF
-- vectors through the transform function of IDF:

val idf = new IDF().fit(tf)
val tfidf = idf.transform(tf)
val v2 = tfidf.first.asInstanceOf[SV]
println(v2.values.size)
println(v2.values.take(10).toSeq)
println(v2.indices.take(10).toSeq)

-------------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zippedTrain = trainSet.zip(tfidf)
val train = zippedTrain.map{ case(text,vector) => LabeledPoint(categories(text(1)),vector) }
train.cache

val testTf = testSet.map(x => hashingTF.transform(tokenize(x(0))))
val testTfIdf = idf.transform(testTf)

val zippedTest = testSet.zip(testTfIdf)
val test = zippedTest.map{ case(text,vector) => LabeledPoint(categories(text(1)),vector) }
test.cache


---- MLlib Multiclass logistic regression --------------

val numClasses = categories.size
// numClasses: Int = 726

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(numClasses).run(train)


---- MLlib Maive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res22: Array[(Double, Double)] = Array((496.0,496.0), (601.0,607.0), (68.0,219.0), (496.0,219.0), (470.0,453.0), (68.0,86.0), (86.0,86.0), (398.0,402.0), (457.0,457.0), (340.0,340.0), (467.0,204.0), (707.0,707.0), (707.0,691.0), (160.0,86.0), (707.0,119.0), (453.0,131.0), (490.0,86.0), (490.0,523.0), (86.0,77.0), (131.0,131.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 13112
validPredicts.count                            // 26078
val accuracy = metrics.accuracy   // 0.5027992944244191

val rev_categ = categories.toArray.map{ case (x,y) => (y.toDouble,x) }.toMap

val validWine = test.map(p => (rev_categ(model.predict(p.features)),rev_categ(p.label)))

validWine.take(20)
res25: Array[(String, String)] = Array((Riesling,Riesling), (Tempranillo,Tempranillo-Merlot), (Bordeaux-style Red Blend,Gewürztraminer), (Riesling,Gewürztraminer), (Portuguese White,Pinot Gris), (Bordeaux-style Red Blend,Cabernet Sauvignon), (Cabernet Sauvignon,Cabernet Sauvignon), (Nebbiolo,Nerello Mascalese), (Pinot Noir,Pinot Noir), (Merlot,Merlot), (Portuguese Red,Gamay), (White Blend,White Blend), (White Blend,Viognier-Chardonnay), (Corvina, Rondinella, Molinara,Cabernet Sauvignon), (White Blend,Catarratto), (Pinot Gris,Chardonnay), (Red Blend,Cabernet Sauvignon), (Red Blend,Sangiovese), (Cabernet Sauvignon,Cabernet Franc), (Chardonnay,Chardonnay))


--------------------------------------------------

metrics.confusionMatrix