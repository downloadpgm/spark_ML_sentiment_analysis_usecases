---- Feature extraction & Data Munging --------------

val df = spark.read.format("json").load("sarcasm_hdline/Sarcasm_Headlines_Dataset.json")

df.printSchema
root
 |-- article_link: string (nullable = true)
 |-- headline: string (nullable = true)
 |-- is_sarcastic: long (nullable = true)
 
df.show
+--------------------+--------------------+------------+
|        article_link|            headline|is_sarcastic|
+--------------------+--------------------+------------+
|https://www.huffi...|former versace st...|           0|
|https://www.huffi...|the 'roseanne' re...|           0|
|https://local.the...|mom starting to f...|           1|
|https://politics....|boehner just want...|           1|
|https://www.huffi...|j.k. rowling wish...|           0|
|https://www.huffi...|advancing the wor...|           0|
|https://www.huffi...|the fascinating c...|           0|
|https://www.huffi...|this ceo will sen...|           0|
|https://politics....|top snake handler...|           1|
|https://www.huffi...|friday's morning ...|           0|
|https://www.huffi...|airline passenger...|           0|
|https://www.huffi...|facebook reported...|           0|
|https://www.huffi...|north korea prais...|           0|
|https://www.huffi...|actually, cnn's j...|           0|
|https://www.huffi...|barcelona holds h...|           0|
|https://entertain...|nuclear bomb deto...|           1|
|https://www.theon...|cosby lawyer asks...|           1|
|https://www.theon...|stock analysts co...|           1|
|https://www.huffi...|bloomberg's progr...|           0|
|https://www.huffi...|craig hicks indicted|           0|
+--------------------+--------------------+------------+

val rdd1 = df.select("headline","is_sarcastic").rdd.map( x => x.toSeq.toArray )

val rdd = rdd1.map( x => x.map( y => y.toString ))

-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(100).mkString(",")
nonWordSplit.distinct.count   // 25320

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.sample(false, 0.3, 42).take(100).mkString("\n")
filterNumbers.distinct.count   // 24882

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
import org.apache.spark.ml.feature.StopWordsRemover
val stopwords = StopWordsRemover.loadDefaultStopWords("english")
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- lists tokens greather one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list least occurring terms in the corpus
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count  // 13844

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""")
 .map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filterNot(token => stopwords.contains(token))
 .filterNot(token => rareTokens.contains(token))
 .filter(token => token.size >= 2)
 .toSeq
}

rdd.flatMap(x => tokenize(x(0))).distinct.count   // 13844

val sets = rdd.randomSplit(Array(0.7,0.3), 11L)
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))
tokens.first.take(20)

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 15).toInt  // 32768
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val trainTf = trainSet.map(x => hashingTF.transform(tokenize(x(0))))
trainTf.cache

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input.

val idf = new IDF().fit(trainTf)
val trainTfIdf = idf.transform(trainTf)

---------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zipTrain = trainSet.zip(trainTfIdf)
val train = zipTrain.map{ case(dset,vector) => LabeledPoint(dset(1).toDouble,vector) }
train.cache

val testTf = testSet.map(x => hashingTF.transform(tokenize(x(0))))
val testTfIdf = idf.transform(testTf)

val zipTest = testSet.zip(testTfIdf)
val test = zipTest.map{ case(dset,vector) => LabeledPoint(dset(1).toDouble,vector) }
test.cache

---- MLlib logistic regression --------------

import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.classification.LogisticRegressionWithSGD
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics

def iterateLRwSGD(iterNums:Array[Int], stepSizes:Array[Double], train:RDD[LabeledPoint], test:RDD[LabeledPoint]) = {
  println("iter, step -> pred / total, AuPR, AuROC") 
  for(numIter <- iterNums; step <- stepSizes) {
    val model = new LogisticRegressionWithSGD
    model.optimizer.setNumIterations(numIter).setStepSize(step)
    val lr = model.run(train)
    val validPredicts = test.map(x => (lr.predict(x.features),x.label))
    val metrics = new BinaryClassificationMetrics(validPredicts)
    println("%d, %5.3f -> %d / %d, %.4f, %.4f".format(numIter, step, validPredicts.filter(x => x._1 == x._2).count, test.count, metrics.areaUnderPR, metrics.areaUnderROC))
  }
}

iterateLRwSGD(Array(100,300,500),Array(1, 0.1, 0.01), train, test)
iter, step -> pred / total, AuPR, AuROC
100, 1.000 -> 6113 / 7873, 0.7252, 0.7698
100, 0.100 -> 6016 / 7873, 0.7210, 0.7543
100, 0.010 -> 5988 / 7873, 0.7203, 0.7498
300, 1.000 -> 6166 / 7873, 0.7298, 0.7776
300, 0.100 -> 6016 / 7873, 0.7202, 0.7545
300, 0.010 -> 5988 / 7873, 0.7203, 0.7498
500, 1.000 -> 6166 / 7873, 0.7298, 0.7776
500, 0.100 -> 6016 / 7873, 0.7202, 0.7545
500, 0.010 -> 5988 / 7873, 0.7203, 0.7498

---- MLlib SVM regression --------------

import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.classification.SVMWithSGD
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics

def iterateSVM(iterNums:Array[Int], train:RDD[LabeledPoint], test:RDD[LabeledPoint]) = {
  println("iter -> pred / total, AuPR, AuROC") 
  for(numIter <- iterNums) {
    val lr = SVMWithSGD.train(train, numIter)
    val validPredicts = test.map(x => (lr.predict(x.features),x.label))
    val metrics = new BinaryClassificationMetrics(validPredicts)
    println("%d -> %d / %d, %.4f, %.4f".format(numIter, validPredicts.filter(x => x._1 == x._2).count, test.count, metrics.areaUnderPR, metrics.areaUnderROC))
  }
}

iterateSVM(Array(100,300,500), train, test)
iter -> pred / total, AuPR, AuROC
100 -> 6181 / 7873, 0.7335, 0.7792
300 -> 6182 / 7873, 0.7291, 0.7806
500 -> 6182 / 7873, 0.7291, 0.7806

---- MLlib Naive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res34: Array[(Double, Double)] = Array((1.0,1.0), (0.0,1.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (1.0,1.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,1.0), (1.0,0.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (0.0,0.0), (0.0,0.0), (1.0,1.0), (1.0,0.0), (1.0,1.0))

import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
val metrics = new BinaryClassificationMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 5968
validPredicts.count                            // 7873
model.getClass.getSimpleName
metrics.areaUnderPR   //  0.6860292135702498
metrics.areaUnderROC  //  0.7571847993727436
