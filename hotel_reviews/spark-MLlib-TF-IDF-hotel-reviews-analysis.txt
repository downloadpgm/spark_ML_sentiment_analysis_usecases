---- Feature extraction & Data Munging --------------

val df = spark.read.format("csv").option("header","true").option("inferSchema","true").option("quoteAll","true").load("hotel_reviews/tripadvisor_hotel_reviews.csv")

scala> df.printSchema
root
 |-- Review: string (nullable = true)
 |-- Rating: integer (nullable = true)
 
scala> df.select("Rating").distinct.show
+------+
|Rating|
+------+
|     1|
|     3|
|     5|
|     4|
|     2|
+------+

import org.apache.spark.sql.types._
val df1 = df.select(col("Review"), (col("Rating")-1).cast(DoubleType).as("Rating"))

val rdd1 = df1.rdd.map( x => x.toSeq.toArray )

val rdd = rdd1.map( x => x.map( y => y.toString ))

-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(20).mkString(",")
nonWordSplit.distinct.count   // 52715

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.sample(false, 0.3, 42).take(20).mkString("\n")
filterNumbers.distinct.count   // 49936

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
import org.apache.spark.ml.feature.StopWordsRemover
val stopwords = StopWordsRemover.loadDefaultStopWords("english")
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- lists tokens greather one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list least occurring terms in the corpus
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count
res24: Long = 25245

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""").map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filter(token => !stopwords.contains(token))
 .filter(token => token.size >= 2)
 .filter(token => !rareTokens.contains(token))
 .toSeq
}

rdd.flatMap(x => tokenize(x(0))).distinct.count
res27: Long = 25245

val sets = rdd.randomSplit(Array(0.7,0.3), 11L)
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))
tokens.first.take(20)

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 16).toInt
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val trainTf = trainSet.map(x => hashingTF.transform(tokenize(x(0))))
trainTf.cache

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input.

val idf = new IDF().fit(trainTf)
val trainTfIdf = idf.transform(trainTf)

---------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zipTrain = trainSet.zip(trainTfIdf)
val train = zipTrain.map{ case(dset,vector) => LabeledPoint(dset(1).toDouble,vector) }
train.cache

val testTf = testSet.map(x => hashingTF.transform(tokenize(x(0))))
val testTfIdf = idf.transform(testTf)

val zipTest = testSet.zip(testTfIdf)
val test = zipTest.map{ case(dset,vector) => LabeledPoint(dset(1).toDouble,vector) }
test.cache

---- MLlib logistic regression --------------

import org.apache.spark.mllib.classification.LogisticRegressionWithSGD
val numIterations = 100
val model = LogisticRegressionWithSGD.train(train, numIterations)

ERROR DataValidators: Classification labels should be 0 or 1. Found 12203 invalid labels

---- MLlib SVM regression --------------

import org.apache.spark.mllib.classification.SVMWithSGD
val numIterations = 100
val model = SVMWithSGD.train(train, numIterations)

ERROR DataValidators: Classification labels should be 0 or 1. Found 12203 invalid labels

---- MLlib Multiclass logistic regression --------------

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(5).run(train)

val validPredicts = test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res16: Array[(Double, Double)] = Array((1.0,2.0), (4.0,4.0), (4.0,4.0), (3.0,1.0), (3.0,3.0), (3.0,3.0), (4.0,4.0), (4.0,3.0), (4.0,4.0), (3.0,1.0), (4.0,3.0), (3.0,3.0), (3.0,1.0), (1.0,2.0), (3.0,4.0), (4.0,3.0), (4.0,4.0), (3.0,4.0), (4.0,4.0), (1.0,2.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 3042
validPredicts.count                            // 6023
val accuracy = metrics.accuracy   // 0.5050639216337374

metrics.confusionMatrix
res19: org.apache.spark.mllib.linalg.Matrix =
231.0  90.0   30.0   28.0   18.0
175.0  146.0  61.0   115.0  55.0
54.0   91.0   124.0  270.0  119.0
33.0   62.0   115.0  834.0  722.0
7.0    25.0   49.0   862.0  1707.0

---- MLlib Naive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res20: Array[(Double, Double)] = Array((2.0,2.0), (4.0,4.0), (4.0,4.0), (2.0,1.0), (3.0,3.0), (4.0,3.0), (4.0,4.0), (4.0,3.0), (4.0,4.0), (3.0,1.0), (4.0,3.0), (3.0,3.0), (0.0,1.0), (2.0,2.0), (3.0,4.0), (4.0,3.0), (4.0,4.0), (4.0,4.0), (4.0,4.0), (3.0,2.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 3282
validPredicts.count                            // 6023
val accuracy = metrics.accuracy   // 0.5449111738336377

metrics.confusionMatrix
res23: org.apache.spark.mllib.linalg.Matrix =
202.0  121.0  45.0   21.0   8.0
103.0  186.0  107.0  119.0  37.0
30.0   76.0   116.0  323.0  113.0
17.0   52.0   111.0  840.0  746.0
5.0    23.0   37.0   647.0  1938.0