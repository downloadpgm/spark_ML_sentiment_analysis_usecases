
val df = spark.read.option("samplingRatio",0.2).json("hdfs://4b6c4f67c4c5:9000/data/20news_json")

val rdd2 = df.rdd.map{ case org.apache.spark.sql.Row(x1,x2) => (x1.toString,x2.toString) }

val rdd = rdd2.map( x => Array(x._2, x._1.split("/").takeRight(2).head))

rdd.map{ case Array(x2, x1) => x1 }.distinct.take(10)
res0: Array[String] = Array(rec.motorcycles, sci.crypt, soc.religion.christian, sci.med, talk.politics.guns, sci.electronics, comp.graphics, alt.atheism, sci.space, comp.sys.ibm.pc.hardware)

rdd.cache

val categories = rdd.map( x => x(1)).distinct.zipWithIndex.collectAsMap
categories: scala.collection.Map[String,Long] = Map(talk.religion.misc -> 16, talk.politics.misc -> 11, rec.sport.hockey -> 17, misc.forsale -> 19, rec.motorcycles -> 0, sci.electronics -> 5, alt.atheism -> 8, talk.politics.mideast -> 10, comp.sys.ibm.pc.hardware -> 9, rec.sport.baseball -> 14, rec.autos -> 15, talk.politics.guns -> 4, sci.space -> 7, sci.crypt -> 1, comp.sys.mac.hardware -> 12, comp.os.ms-windows.misc -> 18, comp.graphics -> 6, comp.windows.x -> 13, sci.med -> 3, soc.religion.christian -> 2)

-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(20).mkString(",")
nonWordSplit.distinct.count   // 173772

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.sample(false, 0.3, 42).take(20).mkString("\n")
filterNumbers.distinct.count   // 109372

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
import org.apache.spark.ml.feature.StopWordsRemover
val stopwords = StopWordsRemover.loadDefaultStopWords("english")
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- lists tokens greather one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list least occurring terms in the corpus
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count
res24: Long = 67316

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""").map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filter(token => !stopwords.contains(token))
 .filter(token => token.size >= 2)
 .filter(token => !rareTokens.contains(token))
 .toSeq
}

rdd.flatMap(x => tokenize(x(0))).distinct.count
res27: Long = 67316

val sets = rdd.randomSplit(Array(0.7,0.3), 11L)
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))
tokens.first.take(20)

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 18).toInt
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val trainTf = trainSet.map(x => hashingTF.transform(tokenize(x(0))))
trainTf.cache

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input.

val idf = new IDF().fit(trainTf)
val trainTfIdf = idf.transform(trainTf)

-------------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zipTrain = trainSet.zip(trainTfIdf)
val train = zipTrain.map{ case(dset,vector) => LabeledPoint(categories(dset(1)),vector) }
train.cache

val testTf = testSet.map(x => hashingTF.transform(tokenize(x(0))))
val testTfIdf = idf.transform(testTf)

val zipTest = testSet.zip(testTfIdf)
val test = zipTest.map{ case(dset,vector) => LabeledPoint(categories(dset(1)),vector) }
test.cache

---- Multiclass logistic regression - Do not converge ! -------------


---- MLlib Maive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res12: Array[(Double, Double)] = Array((8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (2.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0), (8.0,8.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 4971
validPredicts.count                            // 5577
val accuracy = metrics.accuracy   // 0.8913394298009683

metrics.confusionMatrix
res15: org.apache.spark.mllib.linalg.Matrix =                                   
304.0  0.0    0.0    1.0    0.0    2.0    1.0    0.0    0.0    ... (20 total)
0.0    286.0  0.0    1.0    1.0    2.0    3.0    0.0    0.0    ...
0.0    0.0    320.0  4.0    0.0    0.0    0.0    0.0    8.0    ...
0.0    1.0    0.0    296.0  2.0    3.0    0.0    2.0    0.0    ...
1.0    2.0    0.0    1.0    248.0  0.0    0.0    0.0    0.0    ...
1.0    4.0    0.0    1.0    0.0    266.0  10.0   5.0    0.0    ...
0.0    0.0    0.0    1.0    0.0    0.0    251.0  1.0    1.0    ...
0.0    1.0    0.0    4.0    0.0    1.0    0.0    265.0  2.0    ...
0.0    0.0    4.0    0.0    1.0    0.0    0.0    1.0    220.0  ...
1.0    1.0    0.0    1.0    0.0    7.0    4.0    1.0    0.0    ...
0.0    0.0    2.0    0.0    0.0    0.0    2.0    0.0    0.0    ...
1.0...



