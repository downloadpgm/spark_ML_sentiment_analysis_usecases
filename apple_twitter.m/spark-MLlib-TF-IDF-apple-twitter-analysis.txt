
val df = spark.read.format("csv").option("header","true").option("quoteAll","true").load("apple/apple-twitter-sentiment-texts.csv")

df.select("sentiment").distinct.show
+---------+
|sentiment|
+---------+
|       -1|
|        0|
|     null|
|       1 |
|        1|
+---------+

val rdd1 = df.where("sentiment is not null").withColumn("sentiment", df.col("sentiment").cast(DoubleType) + 1).rdd

val rdd = rdd1.map( x => x.toSeq.toArray ).map( x => x.map( y => y.toString.trim))

rdd.map( x => x(1)).distinct.take(10)
res43: Array[String] = Array(1.0, 0.0, 2.0)

-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(20).mkString(",")
nonWordSplit.distinct.count   // 5185

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.sample(false, 0.3, 42).take(20).mkString("\n")
filterNumbers.distinct.count   // 4284

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
import org.apache.spark.ml.feature.StopWordsRemover
val stopwords = StopWordsRemover.loadDefaultStopWords("english")
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- lists tokens greather one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list least occurring terms in the corpus
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count  // 1705

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""").map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filter(token => !stopwords.contains(token))
 .filter(token => token.size >= 2)
 .filter(token => !rareTokens.contains(token))
 .toSeq
}

rdd.flatMap(x => tokenize(x(0))).distinct.count  // 1705

val sets = rdd.randomSplit(Array(0.7,0.3), 11L)
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))
tokens.first.take(20)

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 12).toInt
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val trainTf = trainSet.map(x => hashingTF.transform(tokenize(x(0))))
trainTf.cache

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input.

val idf = new IDF().fit(trainTf)
val trainTfIdf = idf.transform(trainTf)

---------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zipTrain = trainSet.zip(trainTfIdf)
val train = zipTrain.map{ case(dset,vector) => LabeledPoint(dset(1).toDouble,vector) }
train.cache

val testTf = testSet.map(x => hashingTF.transform(tokenize(x(0))))
val testTfIdf = idf.transform(testTf)

val zipTest = testSet.zip(testTfIdf)
val test = zipTest.map{ case(dset,vector) => LabeledPoint(dset(1).toDouble,vector) }
test.cache

---- MLlib logistic regression --------------

import org.apache.spark.mllib.classification.LogisticRegressionWithSGD
val numIterations = 100
val model = LogisticRegressionWithSGD.train(train, numIterations)

ERROR DataValidators: Classification labels should be 0 or 1. Found 89 invalid labels

---- MLlib SVM regression --------------

import org.apache.spark.mllib.classification.SVMWithSGD
val numIterations = 100
val model = SVMWithSGD.train(trainSet, numIterations)

ERROR DataValidators: Classification labels should be 0 or 1. Found 89 invalid labels

---- Multiclass logistic regression --------------

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(3).run(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res52: Array[(Double, Double)] = Array((2.0,2.0), (1.0,1.0), (2.0,0.0), (1.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,1.0), (1.0,1.0), (0.0,0.0), (1.0,2.0), (1.0,0.0), (1.0,1.0), (1.0,1.0), (1.0,0.0), (0.0,0.0), (0.0,0.0), (2.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 331
validPredicts.count                            // 476
val accuracy = metrics.accuracy   // 0.6953781512605042

metrics.confusionMatrix
res55: org.apache.spark.mllib.linalg.Matrix =
171.0  20.0   20.0
46.0   141.0  38.0
9.0    12.0   19.0

---- MLlib Maive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res56: Array[(Double, Double)] = Array((2.0,2.0), (1.0,1.0), (0.0,0.0), (1.0,0.0), (0.0,0.0), (0.0,0.0), (1.0,1.0), (1.0,1.0), (0.0,0.0), (1.0,2.0), (0.0,0.0), (1.0,1.0), (0.0,1.0), (1.0,0.0), (0.0,0.0), (0.0,0.0), (2.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 353
validPredicts.count                            // 476
val accuracy = metrics.accuracy   // 0.7415966386554622

metrics.confusionMatrix
res59: org.apache.spark.mllib.linalg.Matrix =
181.0  15.0   15.0
40.0   158.0  27.0
10.0   16.0   14.0