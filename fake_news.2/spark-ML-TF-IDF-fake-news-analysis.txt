
val fake_txt = sc.textFile("hdfs://a3b2e86b38cb:9000/data/Fake.csv").filter( x => x.length > 0).map( x => {
   if (x(0) == ' ') "\"" + x.replaceFirst(",\"","\",\"")
   else x
 })
 
fake_txt.map( x => x.replaceAll("\"\"","")).saveAsTextFile("hdfs://a3b2e86b38cb:9000/data/fake_news.csv")

val real_txt = sc.textFile("hdfs://a3b2e86b38cb:9000/data/True.csv").filter( x => x.length > 0).map( x => {
   if (x(0) == ' ') "\"" + x.replaceFirst(",\"","\",\"")
   else x
 })
 
real_txt.map( x => x.replaceAll("\"\"",""))saveAsTextFile("hdfs://a3b2e86b38cb:9000/data/true_news.csv")

val fake_news = spark.read.format("csv").option("sep",",").option("quoteAll","true").option("header","true").
                      load("hdfs://a3b2e86b38cb:9000/data/fake_news.csv").where("text is not null")

val true_news = spark.read.format("csv").option("sep",",").option("quoteAll","true").option("header","true").
                      load("hdfs://a3b2e86b38cb:9000/data/true_news.csv").where("text is not null")

fake_news.printSchema
root
 |-- title: string (nullable = true)
 |-- text: string (nullable = true)
 |-- subject: string (nullable = true)
 |-- date: string (nullable = true)


true_news.printSchema
root
 |-- title: string (nullable = true)
 |-- text: string (nullable = true)
 |-- subject: string (nullable = true)
 |-- date: string (nullable = true)
 
val true_df = true_news.select(lit(1).as("label"), 'text)

val fake_df = fake_news.select(lit(0).as("label"), 'text)

val df1 = true_df.union(fake_df)

scala> df1.printSchema
root
 |-- label: integer (nullable = false)
 |-- text: string (nullable = true)

 
import org.apache.spark.ml.feature.RegexTokenizer
val tokenizer = new RegexTokenizer().setInputCol("text").setOutputCol("words").setPattern("""\W+""")
val df2 = tokenizer.transform(df1)

df2.select(explode('words).as("word")).distinct.count  // 122001

// filter out numbers and tokens that are words mixed with numbers
val filterNumbers = df2.select(explode('words).as("word")).where('word.rlike("^[0-9]*$")).distinct

// lists tokens greather one-character length
val tokenCountsFilteredSize = df2.select(explode('words).as("word")).where(length('word) === 1).distinct

// remove terms with only one-occurrence
val rareTokens = df2.select(explode('words).as("word")).groupBy('word).count.where('count === 1).select('word)

// unioned all terms to be removed
val wholeFilters = filterNumbers.union(tokenCountsFilteredSize).union(rareTokens).distinct.cache

wholeFilters.count  // 42932

wholeFilters.printSchema
root
 |-- word: string (nullable = true)
 
val removedWords = wholeFilters.select("word").map( x => x.getString(0)).collect.toArray
removedWords: Array[String] = Array(675, 07, 296, 0851, 0955, 829, 467, 8433, 971933766252421, 691, 94102, 4032, 1512, 2za4lty, amplifier, saucepans, sreynuon, koosha, campusfrom, circulates, 2jbx05v, aundrea, q40, weathervane, diringer, hoodfar, cropland, plaats, kalzony53, stipanovich, rainnwilson, oln, guridy, nimbler, veronika, cheon, condugua, unavoidably, zobe, inertial, swr2, naasan, zubaydi, yianna, tokitsukaze, reanimated, 2m3scbv, marja, farafra, bahrun, anime, dammam, lder,nurjaman, habiba, wattanavrangkul, zongxun, diodes, cuc, cergy, bava, akaidat, irreligious, phumtham, memom, utdi, cuernavaca, hirokatsu, 27j, buba, kakai, barangays, novum, andrassy, hci, laxity, photovoltaic, anb, mupyong, inimical, renouncement, lixiong, elenis, hijri_women_quarter_brain, lvarez, opter,...

// remove stop words
import org.apache.spark.ml.feature.StopWordsRemover
val enStopWords = StopWordsRemover.loadDefaultStopWords("english")
val remover = new StopWordsRemover().setStopWords(enStopWords).
setInputCol("words").
setOutputCol("filteredStopWords")
val df3 = remover.transform(df2)

// total words after stopwords removal
df3.select(explode('filteredStopWords).as("word")).distinct.count  // 121870

// remove tokens collected in removedListWords
import org.apache.spark.ml.feature.StopWordsRemover
val remover = new StopWordsRemover().setStopWords(removedWords).
setInputCol("filteredStopWords").
setOutputCol("filtered")
val df4 = remover.transform(df3)

// total words relevant for analysis
df4.select(explode('filtered).as("word")).distinct.count  // 78942

val dim = math.pow(2, 17).toInt  // 131072

import org.apache.spark.ml.feature.HashingTF
val tf = new HashingTF().setInputCol("filtered").
setOutputCol("TFOut").
setNumFeatures(dim)
val df5 = tf.transform(df4)

import org.apache.spark.ml.feature.IDF
val idf = new IDF().setInputCol("TFOut").setOutputCol("features")
val idfModel = idf.fit(df5)
val df6 = idfModel.transform(df5)

df6.printSchema
root
 |-- label: integer (nullable = false)
 |-- text: string (nullable = true)
 |-- words: array (nullable = true)
 |    |-- element: string (containsNull = true)
 |-- filteredStopWords: array (nullable = true)
 |    |-- element: string (containsNull = true)
 |-- filtered: array (nullable = true)
 |    |-- element: string (containsNull = true)
 |-- TFOut: vector (nullable = true)
 |-- features: vector (nullable = true)


val Array(trainingData, testData) = df6.randomSplit(Array(0.7,0.3),11L)

trainingData.cache
trainingData.count  // 31599

---- ML Logistic classification --------------

import org.apache.spark.ml.classification.{LogisticRegression}
val lr = new LogisticRegression
lr.setRegParam(0.01).setMaxIter(200).setFitIntercept(true)

val model = lr.fit(trainingData)
val pred = model.transform(testData).cache

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator

val bceval = new BinaryClassificationEvaluator()

bceval.evaluate(pred)  // 0.7530801473390067

val predRDD = pred.select("prediction","label").rdd.map( row => (row(0).toString.toDouble,row(1).toString.toDouble)).cache

predRDD.take(20)
res12: Array[(Double, Double)] = Array((1.0,1.0), (1.0,1.0), (0.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0))
import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(predRDD)

predRDD.filter(x => x._1 == x._2).count  // 13109
predRDD.count     // 13297
metrics.accuracy  // 0.9858614725125968

metrics.confusionMatrix
res16: org.apache.spark.mllib.linalg.Matrix =
6955.0  107.0
81.0    6154.0

---- ML Naive Bayes classification --------------

import org.apache.spark.ml.classification.NaiveBayes
val model = new NaiveBayes().fit(trainingData)

val pred = model.transform(testData).cache

import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator
val evaluator = new MulticlassClassificationEvaluator().setMetricName("accuracy")

evaluator.evaluate(pred)  // 0.9430698653831692

val predRDD = pred.select("prediction","label").rdd.map( row => (row(0).toString.toDouble,row(1).toString.toDouble)).cache

predRDD.take(20)
res18: Array[(Double, Double)] = Array((1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (0.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (0.0,1.0), (1.0,1.0), (0.0,1.0), (0.0,1.0), (1.0,1.0), (0.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0))
import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(predRDD)

predRDD.filter(x => x._1 == x._2).count  // 12540
predRDD.count     // 13297
metrics.accuracy  // 0.9430698653831692

metrics.confusionMatrix
res22: org.apache.spark.mllib.linalg.Matrix =
6713.0  349.0
408.0   5827.0

