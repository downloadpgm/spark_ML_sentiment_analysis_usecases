
val true_rdd = sc.textFile("hdfs://hdpmst:9000/data/True.csv")

val true_rdd1 = true_rdd.map( x => x.replaceAll("\"\"","") )

true_rdd1.saveAsTextFile("hdfs://hdpmst:9000/data/True1.csv")

val true_news = spark.read.option("inferSchema","true").option("header","true").csv("hdfs://hdpmst:9000/data/True1.csv")

true_news.show
+--------------------+--------------------+------------+------------------+
|               title|                text|     subject|              date|
+--------------------+--------------------+------------+------------------+
|As U.S. budget fi...|WASHINGTON (Reute...|politicsNews|December 31, 2017 |
|U.S. military to ...|WASHINGTON (Reute...|politicsNews|December 29, 2017 |
|Senior U.S. Repub...|WASHINGTON (Reute...|politicsNews|December 31, 2017 |
|FBI Russia probe ...|WASHINGTON (Reute...|politicsNews|December 30, 2017 |
|Trump wants Posta...|SEATTLE/WASHINGTO...|politicsNews|December 29, 2017 |
|White House, Cong...|WEST PALM BEACH, ...|politicsNews|December 29, 2017 |
|Trump says Russia...|WEST PALM BEACH, ...|politicsNews|December 29, 2017 |
|Factbox: Trump on...|The following sta...|politicsNews|December 29, 2017 |
|Trump on Twitter ...|The following sta...|politicsNews|December 29, 2017 |
|Alabama official ...|WASHINGTON (Reute...|politicsNews|December 28, 2017 |
|Jones certified U...|(Reuters) - Alaba...|politicsNews|December 28, 2017 |
|New York governor...|NEW YORK/WASHINGT...|politicsNews|December 28, 2017 |
|Factbox: Trump on...|The following sta...|politicsNews|December 28, 2017 |
|Trump on Twitter ...|The following sta...|politicsNews|December 28, 2017 |
|Man says he deliv...| (In Dec. 25 stor...|politicsNews|December 25, 2017 |
|Virginia official...|(Reuters) - A lot...|politicsNews|December 27, 2017 |
|U.S. lawmakers qu...|WASHINGTON (Reute...|politicsNews|December 27, 2017 |
|Trump on Twitter ...|The following sta...|politicsNews|December 26, 2017 |
|U.S. appeals cour...|(Reuters) - A U.S...|politicsNews|December 26, 2017 |
|Treasury Secretar...|(Reuters) - A gif...|politicsNews|December 24, 2017 |
+--------------------+--------------------+------------+------------------+
only showing top 20 rows


val fake_rdd = sc.textFile("hdfs://hdpmst:9000/data/Fake.csv")

val fake_rdd1 = fake_rdd.map( x => x.replaceAll("\"\"","") )

fake_rdd1.saveAsTextFile("hdfs://hdpmst:9000/data/Fake1.csv")                                                                                
val fake_news = spark.read.option("inferSchema","true").option("header","true").csv("hdfs://hdpmst:9000/data/Fake1.csv")

fake_news.show
+--------------------+--------------------+-------+-----------------+
|               title|                text|subject|             date|
+--------------------+--------------------+-------+-----------------+
| Donald Trump Sen...|Donald Trump just...|   News|December 31, 2017|
| Drunk Bragging T...|House Intelligenc...|   News|December 31, 2017|
| Sheriff David Cl...|On Friday, it was...|   News|December 30, 2017|
| Trump Is So Obse...|On Christmas day,...|   News|December 29, 2017|
| Pope Francis Jus...|Pope Francis used...|   News|December 25, 2017|
| Racist Alabama C...|The number of cas...|   News|December 25, 2017|
| Fresh Off The Go...|Donald Trump spen...|   News|December 23, 2017|
| Trump Said Some ...|In the wake of ye...|   News|December 23, 2017|
| Former CIA Direc...|Many people have ...|   News|December 22, 2017|
| WATCH: Brand-New...|Just when you mig...|   News|December 21, 2017|
| Papa John?s Foun...|A centerpiece of ...|   News|December 21, 2017|
| WATCH: Paul Ryan...|Republicans are w...|   News|December 21, 2017|
| Bad News For Tru...|Republicans have ...|   News|December 21, 2017|
| WATCH: Lindsey G...|The media has bee...|   News|December 20, 2017|
| Heiress To Disne...|Abigail Disney is...|   News|December 20, 2017|
| Tone Deaf Trump:...|Donald Trump just...|   News|December 20, 2017|
| The Internet Bru...|A new animatronic...|   News|December 19, 2017|
| Mueller Spokesma...|Trump supporters ...|   News|December 17, 2017|
| SNL Hilariously ...|Right now, the wh...|   News|December 17, 2017|
| Republican Senat...|Senate Majority W...|   News|December 16, 2017|
+--------------------+--------------------+-------+-----------------+
only showing top 20 rows
 
val true_df = true_news.select(lit(1).as("label"), 'text)

val fake_df = fake_news.select(lit(0).as("label"), 'text)

val df1 = true_df.union(fake_df)

df1.printSchema
root
 |-- label: integer (nullable = false)
 |-- text: string (nullable = true)

val rdd = df1.select('text, 'label).rdd.map( x => x.toSeq.toArray )


-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(20).mkString(",")
nonWordSplit.distinct.count  // 122002

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.distinct.sample(false, 0.3, 42).take(20).mkString("\n")
filterNumbers.distinct.count  // 105989

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
import org.apache.spark.ml.feature.StopWordsRemover
val stopwords = StopWordsRemover.loadDefaultStopWords("english")
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- remove tokens with one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list terms with only one-occurrence
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count  // 74245

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""")
 .map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filterNot(token => stopwords.contains(token))
 .filterNot(token => rareTokens.contains(token))
 .filter(token => token.size >= 2)
 .toSeq
}

rdd.flatMap(x => tokenize(x(0))).distinct.count  // 74245

val sets = rdd.randomSplit(Array(0.7,0.3), 11L)
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))
tokens.first.take(20)

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 17).toInt
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val trainTf = trainSet.map(x => hashingTF.transform(tokenize(x(0))))
trainTf.cache

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input.

val idf = new IDF().fit(trainTf)
val trainTfIdf = idf.transform(trainTf)

--------------------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zipTrain = trainSet.zip(trainTfIdf)
val train = zipTrain.map{ case(dset,vector) => LabeledPoint(dset(1).toDouble,vector) }
train.cache

val testTf = testSet.map(x => hashingTF.transform(tokenize(x(0))))
val testTfIdf = idf.transform(testTf)

val zipTest = testSet.zip(testTfIdf)
val test = zipTest.map{ case(dset,vector) => LabeledPoint(dset(1).toDouble,vector) }
test.cache

---- MLlib logistic regression --------------

import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.classification.LogisticRegressionWithSGD
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics

def iterateLRwSGD(iterNums:Array[Int], stepSizes:Array[Double], train:RDD[LabeledPoint], test:RDD[LabeledPoint]) = {
  println("iter, step -> pred / total, AuPR, AuROC") 
  for(numIter <- iterNums; step <- stepSizes) {
    val model = new LogisticRegressionWithSGD
    model.optimizer.setNumIterations(numIter).setStepSize(step)
    val lr = model.run(train)
    val validPredicts = test.map(x => (lr.predict(x.features),x.label))
    val metrics = new BinaryClassificationMetrics(validPredicts)
    println("%d, %5.3f -> %d / %d, %.4f, %.4f".format(numIter, step, validPredicts.filter(x => x._1 == x._2).count, test.count, metrics.areaUnderPR, metrics.areaUnderROC))
  }
}

iterateLRwSGD(Array(100,300,500),Array(1, 0.1, 0.01), train, test)
iter, step -> pred / total, AuPR, AuROC
100, 1.000 -> 13094 / 13297, 0.9782, 0.9848
100, 0.100 -> 12949 / 13297, 0.9623, 0.9740
100, 0.010 -> 12536 / 13297, 0.9281, 0.9422
300, 1.000 -> 13099 / 13297, 0.9787, 0.9852
300, 0.100 -> 12995 / 13297, 0.9663, 0.9775
300, 0.010 -> 12536 / 13297, 0.9281, 0.9422
500, 1.000 -> 13099 / 13297, 0.9787, 0.9852
500, 0.100 -> 12995 / 13297, 0.9663, 0.9775
500, 0.010 -> 12536 / 13297, 0.9281, 0.9422

---- MLlib SVM regression --------------

import org.apache.spark.mllib.classification.SVMWithSGD

def iterateSVM(iterNums:Array[Int], train:RDD[LabeledPoint], test:RDD[LabeledPoint]) = {
  println("iter -> pred / total, AuPR, AuROC") 
  for(numIter <- iterNums) {
    val lr = SVMWithSGD.train(train, numIter)
    val validPredicts = test.map(x => (lr.predict(x.features),x.label))
    val metrics = new BinaryClassificationMetrics(validPredicts)
    println("%d -> %d / %d, %.4f, %.4f".format(numIter, validPredicts.filter(x => x._1 == x._2).count, test.count, metrics.areaUnderPR, metrics.areaUnderROC))
  }
}

iterateSVM(Array(100,300,500), train, test)
iter -> pred / total, AuPR, AuROC
100 -> 13036 / 13297, 0.9740, 0.9803
300 -> 13061 / 13297, 0.9776, 0.9821
500 -> 13061 / 13297, 0.9776, 0.9821

---- MLlib Maive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(train)

val validPredicts = test.map(x => (model.predict(x.features),x.label))

validPredicts.take(20)
res19: Array[(Double, Double)] = Array((1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (0.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (0.0,1.0), (1.0,1.0))

import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
val metrics = new BinaryClassificationMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 12447
validPredicts.count                            // 13297
model.getClass.getSimpleName
metrics.areaUnderPR   //  0.9225809299395998
metrics.areaUnderROC  //  0.9352077725141301

